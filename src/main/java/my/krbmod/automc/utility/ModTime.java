package my.krbmod.automc.utility;

public class ModTime {
	
	public static final long SECONDS_TO_MILLIS = 1000;
	public static final long MINUTES_TO_MILLIS = 60*1000;
	public static final long HOURS_TO_MILLIS = 60*60*1000;
	public static final long ONE_HOUR_IN_MILLIS = 1 * HOURS_TO_MILLIS;
	
	public static int toSeconds(String timeString) {

		// TODO - Validate input parameter
		String[] units = timeString.split(":");
		// TODO - Confirm split was successful

		int minutes = Integer.parseInt(units[0]);
		// TODO - Catch exceptions generated by parseInt for invalid Ints
		int seconds = Integer.parseInt(units[1]);
		// TODO - Catch exceptions generated by parseInt for invalid Ints

		return 60 * minutes + seconds;
	}

	public static String toTimeString(int s) {
		String result = "";

		// We ignore the sign if parameter is negative
		int minutes = Math.abs(s / 60);
		int seconds = (Math.abs(s) - (minutes * 60));

		return String.format("%02d:%02d", minutes, seconds);

	}

	public static String millisToString(long m) {
		
		// We ignore the sign if parameter is negative
		m = Math.abs(m);
		if (m >= ONE_HOUR_IN_MILLIS) {
			int hours = (int) (m / HOURS_TO_MILLIS);
			m = m - (hours * HOURS_TO_MILLIS);
			int minutes = (int) (m / MINUTES_TO_MILLIS);
			m = m - (minutes * MINUTES_TO_MILLIS);
			int seconds = (int) (m/SECONDS_TO_MILLIS);
			
			// when it's an hour or more we drop the millis
			return String.format("%02d:%02d:%02d", hours, minutes, seconds);
	
		} else {
			int minutes = (int) (m / MINUTES_TO_MILLIS);
			m = m - (minutes * MINUTES_TO_MILLIS);
			int seconds = (int) (m/SECONDS_TO_MILLIS);
			int millis = (int) (m - (seconds * SECONDS_TO_MILLIS));
			
			// when it's less than an hour we keep the millis
			return String.format("%02d:%02d.%04d", minutes, seconds, millis);
			
		}

	}
}
